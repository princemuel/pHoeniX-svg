{
  "Immediately Invoked Function Expression ": {
    "prefix": "astro:iife",
    "description": "This is an immediately invoked function expression",
    "isFileTemplate": false,
    "body": "{(()=> {\n${1}\n})()}",
  },
  "Immediately Invoked Generator Expression": {
    "body": [
      "{(function* () {\n",
      "for(const ${0:item} of ${0:item}s) {\n${1}\n}\n",
      "})()\n}",
    ],
    "prefix": "astro:iige",
    "description": "This is an generator expression",
  },
  "Astro Base": {
    "prefix": "astro:base",
    "description": "This is a basic scaffold for a component in Astro",
    "isFileTemplate": true,
    "body": [
      "---\n${3}\n---",
      "<${1:div}>\n",
      "</div>\n",
      "<style>\n${2}\n</style>",
    ],
  },
  "Astro Client Script Base": {
    "prefix": "astro:cbase",
    "description": "Astro Single File Component w Client Script",
    "isFileTemplate": true,
    "body": [
      "<${0:div}>\n</div>\n",
      "<style>\n${1}\n</style>\n",
      "<script>\n</script>",
    ],
  },
  "Header Main Footer Component ": {
    "prefix": "astro:base-hmf",
    "description": "This is a header footer main snippet",
    "isFileTemplate": true,
    "body": [
      "---\n${5}\n---",
      "<!DOCTYPE html>",
      "<html lang='en'>",
      "<head>",
      "<meta charset='UTF-8' />",
      "<meta http-equiv='X-UASTRO:Compatible' content='IE=edge' />",
      "<meta name='viewport' content='width=device-width, initial-scale=1.0' />",
      "<title>Document</title>",
      "</head>\n",
      "<body>",
      "<header>\n${1}\n</header>\n",
      "<main>\n${2}\n</main>\n",
      "<footer>\n${3}\n</footer>\n",
      "</body>",
      "</html>\n",
      "<style>\n${4}\n</style>",
    ],
  },
  "Fragment Set HTML": {
    "prefix": "astro:frag--html",
    "description": "This is a fragment with set html",
    "isFileTemplate": false,
    "body": "<Fragment set:html={${0}} />",
  },
  "Fragment Slot Name": {
    "prefix": "astro:frag--slot",
    "description": "This is a fragment with a slot name in it",
    "isFileTemplate": false,
    "body": "<Fragment slot='${1}'>\n${2}\n</Fragment>",
  },
  "Pre-rendered Page": {
    "prefix": "astro:base-pr-pg",
    "description": "This is a pre-rendered page snippet",
    "isFileTemplate": false,
    "body": [
      "---\nexport const prerender = true\n---",
      "<${1:div}>\n</div>\n",
      "<style>\n${2}\n</style>",
    ],
  },
  "Pre rendered Page with getStaticPaths": {
    "prefix": "astro:base-pr-pg--gsp",
    "description": "This is a pre-rendered page with getStaticPaths Setup",
    "isFileTemplate": true,
    "body": [
      "---",
      "import { InferGetStaticParamsType, InferGetStaticPropsType } from 'astro'\n",
      "export const prerender = true\n",
      "export const getStaticPaths = async () => {\n",
      "${2}\n",
      "return [",
      "{",
      "params: {},",
      "props:{},",
      "}",
      "]\n",
      "}\n",
      "type Props = InferGetStaticPropsType<typeof getStaticPaths>\n",
      "const {${3}} = Astro.props\n",
      "---",
      "<${1:div}>\n</div>",
    ],
  },
  "Page with getStaticPaths": {
    "prefix": "astro:base-gsp",
    "description": "This is a page snippet with getStaticPaths",
    "isFileTemplate": false,
    "body": [
      "---",
      "import { InferGetStaticPropsType } from 'astro'\n",
      "export const getStaticPaths = async ({}) => {\n",
      "${2}\n",
      "return [",
      "{",
      "params: {},",
      "props:{},",
      "}",
      "]\n",
      "}\n",
      "type Props = InferGetStaticPropsType<typeof getStaticPaths>\n",
      "const {${3}} = Astro.props\n",
      "---",
      "<${1:div}>\n</div>\n",
    ],
  },
  "Astro Component": {
    "prefix": "astro:base-cmp",
    "description": "This is a basic Astro component",
    "isFileTemplate": true,
    "body": [
      "---",
      "type Props = {\n${2}\n}\n",
      "const {${3}} = Astro.props\n",
      "---",
      "<${1:div}>\n</div>\n",
      "<style>\n${4}\n</style>",
    ],
  },
  "Astro Component with Client Script": {
    "prefix": "astro:base-cmp--csc",
    "description": "This is an Astro component with a client script",
    "isFileTemplate": true,
    "body": [
      "---",
      "type Props = {\n${3}\n}\n",
      "const {${4}} = Astro.props\n",
      "---",
      "<${2:div}>\n</${2:div}>\n",
      "<style>\n${1}\n</style>\n",
      "<script>${5}</script>",
      "",
    ],
  },
  "Layout Page": {
    "prefix": "astro:base-lpg",
    "description": "This a page with layout scaffold",
    "isFileTemplate": true,
    "body": [
      "---${4}---",
      "<${1:Layout}>\n${2}\n</${1:Layout}>\n",
      "<style>\n${3}\n</style>",
    ],
  },
  "Layout Page with Header and Footer slot": {
    "prefix": "astro:base-lpg--hmf",
    "description": "The is a scaffold for a Layout Page with a header and footer slot and main as default slot",
    "isFileTemplate": false,
    "body": [
      "---\n${5}\n---",
      "<${1:Layout}>\n",
      "<slot name='header'>\n${2}\n</slot>\n",
      "${3}",
      "<slot name='footer'>\n${4}\n</slot>\n",
      "</${1:Layout}>",
    ],
  },
  "Content Collections Page with getStaticPaths": {
    "prefix": "astro:base-gsp--gc",
    "description": "Scaffold for Get Collections With getStaticPaths",
    "isFileTemplate": true,
    "body": [
      "---",
      "import { getCollection, CollectionEntry } from 'astro:content';\n",
      "import { InferGetStaticParamsType, InferGetStaticPropsType } from 'astro'\n",
      "export async function getStaticPaths() {\n",
      "const ${2:docs} = await getCollection('${1:docs}');\n",
      "return ${2:docs}.map(entry => ({",
      "params: { slug: entry.slug }, props: { entry }",
      "}));",
      "}\n",
      "type Props = InferGetStaticPropsType<typeof getStaticPaths>\n",
      "const { entry } = Astro.props\n",
      "const { Content } = await entry.render()\n",
      "const { title, ${3} } = entry.data\n",
      "---",
      "<h1>{title}</h1>\n",
      "<article>\n<Content frontmatter={entry.data}  />\n</article>",
      "<style>\n${3}\n</style>",
    ],
  },
  "Map Expression ": {
    "prefix": "astro:map",
    "description": "This is a simple map expression for Astro",
    "isFileTemplate": false,
    "body": ["{ ${1:item}s.map((${1:item}) => (${2:item})) }"],
  },
  "Map Expression Using a Block": {
    "prefix": "astro:map--an-fn",
    "description": "This is a map expression for Astro using a anonymous function",
    "isFileTemplate": false,
    "body": ["{\n${1:item}s.map((${1:item}) =>{\nreturn ${2:item}\n})\n}"],
  },
  "Ternary Expression": {
    "prefix": "astro:tern",
    "description": "A ternary expression scaffold",
    "isFileTemplate": false,
    "body": ["{ ${1:expression} ? ${2} : ${3:null} }"],
  },
}
