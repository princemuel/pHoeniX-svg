---
import { getImage } from "astro:assets";
import { ClientRouter } from "astro:transitions";
import { pwaAssetsHead } from "virtual:pwa-assets/head";
import { pwaInfo } from "virtual:pwa-info";
// import ThemeProvider from "./theme-provider.astro";
import { defaultKeywords, delimiter } from "@/config/settings";
import { formatCanonicalURL } from "@/helpers/format-canonical";

import MonoItalic from "@fontsource-variable/source-code-pro/files/source-code-pro-latin-wght-italic.woff2";
import MonoNormal from "@fontsource-variable/source-code-pro/files/source-code-pro-latin-wght-normal.woff2";
import SansItalic from "@fontsource-variable/ubuntu-sans/files/ubuntu-sans-latin-ext-wght-italic.woff2";
import SansNormal from "@fontsource-variable/ubuntu-sans/files/ubuntu-sans-latin-ext-wght-normal.woff2";

import "@fontsource-variable/source-code-pro/wght-italic.css";
import "@fontsource-variable/source-code-pro/wght.css";
import "@fontsource-variable/ubuntu-sans/wght-italic.css";
import "@fontsource-variable/ubuntu-sans/wght.css";

import "@/assets/styles/global.css";
import { pluralize } from "@/utilities/strings";

type Props = Meta & { og?: OpenGraph; twitter?: Twitter };

const {
  title,
  description,
  image,
  keywords = [],
  canonical,
  publishedAt,
  updatedAt,
  directives = {},
} = Astro.props;

const og = {
  type: "website",
  ...Astro.props.og,
} satisfies OpenGraph;

const twitter = {
  handle: "@iamprincemuel",
  card: "summary_large_image",
  ...Astro.props.twitter,
} satisfies Twitter;

const generated = (async () => {
  const image_src =
    image || import("@/assets/images/princemuel-open-graph-image-2024.jpg");
  return getImage({ src: image_src, format: "png", width: 1200, height: 630 });
})();

const name = "Prince Muel";
const locale = "en";
const application_name = `${name}'s Personal Website`;
const linkCanonical = formatCanonicalURL(canonical || Astro.url.pathname, true);
const seoKeywords = keywords ? keywords : defaultKeywords;
const published_at = new Date(publishedAt ?? Date.now());
const updated_at = new Date(updatedAt ?? published_at);

const htmlTitle = ((title, delimiter, absolute) => {
  const defaultTitle = `Prince Muel ${delimiter} Frontend Engineer (Freelance)`;
  const template = `%s ${delimiter} Prince Muel`;
  if (absolute) return title || defaultTitle;
  if (!title) return defaultTitle;
  return template.replace("%s", title);
})(title[0], delimiter, title[1]);

const { noindex, nofollow, nosnippet } = directives;

const directive = [
  noindex ? "noindex" : "index",
  nofollow ? "nofollow" : "follow",
].join(",");

const img = await generated;
---

{/* Primary Meta Tags */}
<meta name="application-name" content={application_name} />
<meta name="generator" content={Astro.generator} />
<meta name="keywords" itemprop="keywords" content={seoKeywords.join(",")} />
<meta name="creator" content={name} />
<meta name="publisher" content={name} />

<title>{htmlTitle}</title>
<meta name="title" content={htmlTitle} />
<meta name="description" content={description} />

{/*  Favicons / Manifest / Robots  */}
<Fragment set:html={pwaInfo?.webManifest.linkTag} />
{pwaAssetsHead.links.map((link) => <link {...link} />)}
<meta name="robots" content={directive} />
<meta
  name="googlebot"
  content={[
    directive,
    nosnippet ? "nosippet" : "max-snippet:160",
    "max-image-preview:large",
    "max-video-preview:-1",
  ].join(",")}
/>
<meta content={pluralize(1, "day")} name="revisit-after" />

{/* Permalink / Sitemap / Feed / Changelog */}
<link rel="canonical" href={linkCanonical} />
<link
  rel="sitemap"
  type="application/xml"
  href={new URL("/sitemap-index.xml", Astro.site)}
/>
<link
  rel="alternate"
  type="application/rss+xml"
  title={`${name}'s Blog RSS Feed`}
  href={new URL("/blog/feed.xml", Astro.site)}
/>
<link
  rel="alternate"
  type="application/rss+xml"
  href={new URL("/changelog.xml", Astro.site)}
  title="Changelog (Version History)"
/>

{/* Open Graph / Facebook */}
<meta property="og:type" content={og.type} />
<meta property="og:locale" content={locale} />
<meta property="og:site_name" content={application_name} />
<meta property="og:title" content={htmlTitle} />
<meta property="og:url" content={linkCanonical} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(img.src, Astro.site)} />
<meta property="og:image:type" content={img.options.format} />
<meta property="og:image:width" content={img.attributes.width} />
<meta property="og:image:height" content={img.attributes.height} />
<meta property="og:image:alt" content={htmlTitle} />

{/* Twitter */}
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:creator" content={twitter.handle} />
<meta name="twitter:title" content={htmlTitle} />
<meta name="twitter:url" content={linkCanonical} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={new URL(img.src, Astro.site)} />
<meta name="twitter:image:type" content={img.options.format} />
<meta name="twitter:image:width" content={img.attributes.width} />
<meta name="twitter:image:height" content={img.attributes.height} />
<meta property="twitter:image:alt" content={htmlTitle} />

{/* Widgets */}
<meta
  name="theme-color"
  media="(prefers-color-scheme: light)"
  content="#fafafa"
/>
<meta
  name="theme-color"
  media="(prefers-color-scheme: dark)"
  content={pwaAssetsHead.themeColor?.content}
/>
<meta name="msapplication-TileColor" content="#fafafa" />
<meta name="mobile-web-app-capable" content="yes" />
<meta name="mobile-web-app-status-bar-style" content="black-translucent" />

<meta name="twitter:dnt" content="on" />
<meta name="twitter:widgets:csp" content="on" />
<meta name="twitter:widgets:autoload" content="off" />
<meta name="twitter:widgets:theme" content="light" />

{
  og.type === "article" && (
    <Fragment>
      <link rel="author" href={new URL("humans.txt", Astro.site)} />
      <meta name="author" content={name} />
      <meta
        property="article:published_time"
        content={published_at.toISOString()}
      />
      <meta
        name="publish_date"
        property="og:publish_date"
        content={published_at.toISOString()}
      />
      <meta
        property="article:modified_time"
        content={updated_at.toISOString()}
      />
      <meta
        name="updated_date"
        property="og:updated_date"
        content={updated_at.toISOString()}
      />
      <meta name="author" property="article:author" content={""} />
      <meta property="article:tag" content={keywords.join(",")} />
    </Fragment>
  )
}

{
  og.type === "profile" && (
    <Fragment>
      <meta property="profile:first_name" content="Samuel" />
      <meta property="profile:last_name" content="Chukwuzube" />
      <meta property="profile:username" content="princemuel" />
      <meta property="profile:gender" content="male" />
    </Fragment>
  )
}

{/* Font Loaders */}
<link
  rel="preload"
  as="font"
  type="font/woff2"
  href={SansNormal}
  crossorigin="anonymous"
/>
<link
  rel="preload"
  as="font"
  type="font/woff2"
  href={SansItalic}
  crossorigin="anonymous"
/>
{
  og.type === "article" && (
    <Fragment>
      <link
        rel="prefetch"
        as="font"
        type="font/woff2"
        href={MonoNormal}
        crossorigin="anonymous"
      />
      <link
        rel="prefetch"
        as="font"
        type="font/woff2"
        href={MonoItalic}
        crossorigin="anonymous"
      />
    </Fragment>
  )
}

{/* Webmentions */}
<link rel="webmention" href="https://webmention.io/princemuel.com/webmention" />
<link rel="pingback" href="https://webmention.io/princemuel.com/xmlrpc" />

{
  /* <meta name="format-detection" content="telephone=no, address=no, email=no" /> */
}
{/* <meta name="google-site-verification" content="google" /> */}
{/* <meta name="y_key" content="yahoo" /> */}
{/* <meta name="yandex-verification" content="yandex" /> */}
{/* <meta name="bing" content="msvalidate.01=0" /> */}
{/* <meta name="me" content="vansomecsam@gmail.com" /> */}
{/* <meta name="me" content="my-link" />  */}

<ClientRouter />
{/* <ThemeProvider />  */}
