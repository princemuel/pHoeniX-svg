---
import { Icon } from "astro-icon/components";
import { AstroError } from "astro/errors";
import { tv } from "tailwind-variants";

import type { Icon as IconType } from "virtual:astro-icon";
import type { HTMLAttributes } from "astro/types";
import type { VariantProps } from "tailwind-variants";

const alertBox = tv({
  slots: {
    base: "mt-4 flex flex-col gap-2 border-s-4 border-solid p-4 text-white",
    label: "flex items-center gap-2 font-medium text-xs",
    icon: "fill-current text-lg",
    // icon: "text-base size-4",
    content: "",
  },
  variants: {
    variant: {
      info: {
        base: "border-blue-500 bg-blue-900",
        label: "text-blue-200",
        icon: "text-blue-200",
        content: "",
      },
      tip: {
        base: "border-gray-500 bg-gray-900",
        label: "text-gray-200",
        icon: "text-gray-200",
        content: "",
      },
      caution: {
        base: "border-yellow-500 bg-yellow-900",
        label: "text-yellow-200",
        icon: "text-yellow-200",
        content: "",
      },
      danger: {
        base: "border-red-500 bg-red-900",
        label: "text-red-200",
        icon: "text-red-200",
        content: "",
      },
    },
  },
});

const icons = new Map<Variants["variant"], IconType>([
  ["info", "information"],
  ["tip", "rocket"],
  ["caution", "warning"],
  ["danger", "error"],
]);

type Variants = VariantProps<typeof alertBox>;
type Props = Prettify<HTMLAttributes<"aside"> & Variants>;

const { base, label, icon, content } = alertBox();
const { title, variant = "info", ...rest } = Astro.props;

if (!variant)
  throw new AstroError(
    "Invalid `variant` prop passed to the `<AlertBox>` component.\n",
    `Received: ${JSON.stringify(variant)}\n` +
      `Expected one of ${[...icons.keys()].map((icon) => JSON.stringify(icon)).join(", ")}`,
  );
---

<aside aria-label={title} {...rest} class={base({ variant })}>
  <p class={label({ variant })} aria-hidden={true}>
    <Icon
      name={icons.get(variant) || "information"}
      class={icon({ variant })}
    />
    <span class="text-base capitalize text-inherit">{title}</span>
  </p>
  <section class={content({ variant })}>
    <slot />
  </section>
</aside>
