---
import { resend } from "@/config/clients";
import { pluralize } from "@/utilities/strings";
import { Icon } from "astro-icon/components";
import type { HTMLAttributes } from "astro/types";
import Link from "../atoms/link.astro";

type Props = HTMLAttributes<"div">;

const { class: className, ...rest } = Astro.props;

type ListAudiencesResponse = Awaited<ReturnType<typeof resend.audiences.list>>;

const audiences = await (async () => {
  try {
    const response = await resend.audiences.list();
    return response;
  } catch (error) {
    return [] as unknown as ListAudiencesResponse;
  }
})();

const subs = audiences.data?.data ?? [];
---

<section
  aria-labelledby="news-letter"
  {...rest}
  class:list={[
    "flex flex-col gap-4 p-6 sm:gap-6",
    "rounded-2xl border border-gray-300",
    className,
  ]}
>
  <header class="flex flex-col gap-2">
    <h4
      id="news-letter"
      class="flex items-center gap-2 text-lg font-medium text-gray-900"
    >
      <Icon name="lucide:mail-plus" class="" />
      <span class="text-inherit">Stay up to date</span>
    </h4>

    <p class="text-sm text-gray-600">
      Get notified when I publish something new.
    </p>
  </header>

  <div class="flex flex-col gap-1">
    <p
      role="alert"
      aria-live="polite"
      aria-atomic="true"
      data-state="idle"
      id="newsletter-toast"
      class:list={[
        "text-sm font-light data-[state='error']:text-red-500 data-[state='success']:text-green-500",
      ]}
    >
    </p>

    <form
      id="newsletter-form"
      class:list={[
        "flex w-full flex-col items-center gap-4 md:flex-row md:p-1",
        "md: md:rounded md:border md:border-gray-300",
      ]}
    >
      <input
        type="hidden"
        name="honeypot"
        placeholder="do not fill this"
        class="sr-only"
      />

      <input
        type="email"
        id="newsletter.email.input"
        name="email"
        aria-autocomplete="both"
        autocomplete="email"
        aria-invalid="false"
        aria-errormessage="newsletter.email.error"
        placeholder="Email Address"
        class:list={[
          "w-full rounded bg-transparent p-3",
          "text-sm text-gray-900 caret-current",
          "md:flex-grow md:rounded-none md:border-none md:px-3 md:py-2",
        ]}
      />

      <button
        form="newsletter-form"
        type="submit"
        class:list={[
          "w-full px-4 py-3 md:px-3 md:py-2",
          "text-sm font-medium text-gray-900",
          "rounded bg-gray-200",
          "transition-colors hocus:text-gray-500 md:w-auto",
        ]}
      >
        Subscribe
      </button>
    </form>
  </div>

  <div
    class="flex flex-col flex-wrap items-center justify-between gap-2 text-sm text-gray-600 3xs:flex-row"
  >
    <p>Join {subs.length} other {pluralize(subs.length, "subscriber")}.</p>
    <Link
      href="/newsletter"
      class="flex items-center gap-2 hocus:text-gray-500"
    >
      Read past issues <Icon name="lucide:move-right" />
    </Link>
  </div>
</section>

<script>
  import { getElement } from "@/helpers/dom";
  import { actions, isInputError } from "astro:actions";

  const form = getElement("#newsletter-form", HTMLFormElement);
  const toast = getElement("#newsletter-toast", HTMLParagraphElement);

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const { data, error } = await actions.subscribe(new FormData(form));
    if (error && isInputError(error)) {
      toast.dataset.state = "error";
      toast.textContent = (
        error.fields.email ||
        error.fields.honeypot ||
        []
      ).join(" ");
    }
    if (data?.ok) {
      toast.dataset.state = "success";
      toast.textContent = data.payload;
    }
  });
</script>
