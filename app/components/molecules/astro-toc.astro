---
import { hasValues } from "@/utilities/arrays";
import type { MarkdownHeading } from "astro";
import TocItem from "./toc-item.astro";

type Props = { headings?: MarkdownHeading[] };

const { headings: hs } = Astro.props;

const headings = (hs ?? []).filter((h) => h.depth === 2);
---

<astro-toc class="contents" aria-label="Table of Contents" data-headings="">
  <nav
    aria-label="Table of Contents"
    class="sticky top-12 flex flex-col gap-4 pb-20"
  >
    <h4 class="text-base text-gray-700">
      <slot>On this page</slot>
    </h4>
    {
      hasValues(headings) ? (
        <ul class="flex flex-col text-gray-500">
          {headings.map((heading) => (
            <TocItem heading={heading} />
          ))}
        </ul>
      ) : null
    }
  </nav>
</astro-toc>

<script>
  import { create_custom_el } from "@/helpers/custom-elements";
  import { getElement, getElements } from "@/helpers/dom";

  class AstroToc extends HTMLElement {
    #observer: IntersectionObserver | null;
    constructor() {
      super();
      this.#observer = null;
    }

    public connectedCallback() {
      this.#setupObserver();
    }

    public disconnectedCallback() {
      if (this.#observer) this.#observer.disconnect();
    }

    #setupObserver() {
      const attrName = "data-id";
      this.#observer = new IntersectionObserver(
        (entries) => this.#handleIntersection(entries, attrName),
        { rootMargin: "-15% 0px -80% 0px" },
      );
      const sections = getElements(`section[${attrName}]`, HTMLElement);
      sections.forEach((section) => this.#observer?.observe(section));
    }

    #handleIntersection(
      entries: IntersectionObserverEntry[],
      attrName: string,
    ) {
      entries.forEach((entry) => {
        const slug = entry.target.getAttribute(attrName);
        const link = getElement(`a[href="#${slug}"]`, HTMLAnchorElement, this);
        const tocItem = link.closest("li");
        if (!tocItem) return;
        if (entry.intersectionRatio > 0)
          tocItem.setAttribute("data-state", "on");
        else tocItem.setAttribute("data-state", "off");
      });
    }
  }

  create_custom_el("astro-toc", AstroToc);
</script>
