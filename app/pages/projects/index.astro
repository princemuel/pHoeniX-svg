---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Link from "@/components/atoms/link.astro";
import Prose from "@/components/atoms/prose.astro";
import Time from "@/components/atoms/time.astro";
import PostDivider from "@/components/molecules/post-divider.astro";
import RootLayout from "@/layouts/root.astro";
import { hasValues } from "@/utilities/arrays";

let entries = await getCollection(
  "projects",
  ({ data }) => !(import.meta.env.PROD && data.draft),
);
entries = entries.sort((a, b) => {
  return Number(b.data.publishedAt) - Number(a.data.publishedAt);
});
---

<RootLayout title={["Projects"]} description="">
  <Prose id="article">
    <dl
      class="not-prose flex items-center justify-between gap-2 font-sans text-[.625rem] font-bold tracking-tighter text-gray-600"
    >
      <dt>Projects</dt>
      <dd>x{entries.length}</dd>
    </dl>

    <h1 id="headline" class="mt-6">
      <Link class="linked" aria-hidden tabindex="-1" href="/projects">
        Experiments
      </Link>
    </h1>
    <p>This is where I tinker</p>

    <Fragment>
      <div class="not-prose flex flex-col gap-6">
        {
          entries.map((entry, idx, array) => {
            const previous = array.at(idx - 1)?.data.publishedAt || new Date();
            const divide =
              idx === 0 ||
              new Date(entry.data.publishedAt).getMonth() !==
                new Date(previous).getMonth();

            const { title, summary, publishedAt, tools, media } = entry.data;
            const cover = media?.cover;

            return (
              <Fragment>
                {divide && <PostDivider datetime={publishedAt} />}
                <article
                  aria-describedby={`${entry.id}-desc`}
                  aria-labelledby={`${entry.id}`}
                  aria-setsize="-1"
                  aria-posinset={idx + 1}
                  class="group relative flex items-center gap-6 rounded-md border border-gray-300 p-4"
                >
                  {/* <div class="absolute inset-0 z-0 hidden rounded-md transition motion-reduce:transition-none lg:block lg:group-hover:bg-gray-800/50 lg:group-hover:shadow-[inset_0_1px_0_0_rgba(148,163,184,0.1)] lg:group-hover:drop-shadow-lg" /> */}
                  {cover && (
                    <figure class="basis-2/5">
                      <Image
                        src={cover.src}
                        width={cover.width}
                        height={cover.height}
                        alt={media.alt}
                        class="w-full rounded"
                      />
                      <figcaption class="sr-only">{media.alt}</figcaption>
                    </figure>
                  )}

                  <div class="flex basis-4/5 flex-col items-start gap-4">
                    <div class="flex items-center">
                      <Time
                        datetime={publishedAt}
                        class="font-sans text-[.625rem] tracking-tighter text-gray-600"
                      />
                    </div>

                    <h2 class="font-sans text-lg tracking-tighter text-gray-900 group-hover:underline">
                      <Link href={`/projects/${idx + 1}`}>{title}</Link>
                    </h2>

                    <p class="text-sm text-gray-600">{summary}</p>

                    {hasValues(tools) && (
                      <ul class="flex items-center gap-4 font-sans text-[.625rem] tracking-tighter text-gray-600">
                        {tools.map((tool) => (
                          <li class="/50 rounded border border-gray-200 px-2 py-1 capitalize">
                            <Link href={`/tags/${tool}`} class="">
                              {tool}
                            </Link>
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                </article>
              </Fragment>
            );
          })
        }
      </div>
    </Fragment>
  </Prose>
</RootLayout>
